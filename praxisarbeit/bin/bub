#!/usr/bin/env bash

# Examples:
# sudo LOGLEVEL=D bub
# sudo bub -v D
# sudo bub --config hello/world --group wheel --group=root -d /backup/homes\
#   -e hello -e world --pattern hey -k 3 -v
# sudo bub -e hello,world -e '*.bash*'
# sudo bub --config=custom.env

VERSION=1.1.0
LOGLEVEL=${LOGLEVEL:-W}  # Set default log level
CWD=$(pwd)               # Current working directory
cd $(dirname $0)
BINDIR=$(pwd)            # Script location
cd $CWD
BASENAME=$(basename $0)  # Script name
TMPDIR=/tmp/$BASENAME.$$ # Temporary directory
ETCDIR=$BINDIR/../etc    # Config directory
LOGFILE=$BINDIR/../var/bub.log
PARAM_LINE="$BASENAME $@"

usage() {
    echo 'SYNOPSIS:'                                                                                       >&2
    echo "    $BASENAME [<inputfile>] [<arguments>]"                                                       >&2
    echo '    inputfile: file contains group names, one per line'                                          >&2
    echo ''                                                                                                >&2
    echo 'ARGUMENTS:'                                                                                      >&2
    echo '    -h|--help                    print this help'                                                >&2
    echo '    --version                    show version and exit'                                          >&2
    echo '    --config=FILE                path to config file'                                            >&2
    echo '    -g=GROUP|--group=GROUP       group to archive, flag may be passed multiple times'            >&2
    echo '    -d=DIR|--directory=DIR       save backup to directory'                                       >&2
    echo '    -e=FILE|--exclude=FILE       file to exclude from backup, flag may be passed multiple times' >&2
    echo '    -p=NAME|--pattern=NAME       output file name'                                               >&2
    echo '    -k|--keep                    number of backups to keep, must be greater than 0'              >&2
    echo '    -v[=LEVEL]|--verbose[=LEVEL] log verbosity (D|I|W|E), if no LEVEL provided, then D'          >&2
    echo ''                                                                                                >&2
    echo 'IGNORE FILE:'                                                                                    >&2
    echo '    If a directory contains a file bub.ignore, with a pattern'                                   >&2
    echo '    specified on each line, all files in that and subsequent'                                    >&2
    echo '    directories matching one of the patterns are excluded from'                                  >&2
    echo '    backup.'                                                                                     >&2
    echo ''                                                                                                >&2
    echo 'EXIT CODES:'                                                                                     >&2
    echo '    0   Success'                                                                                 >&2
    echo '    1   Require root permissions'                                                                >&2
    echo '    3   Invalid configuration file'                                                              >&2
    echo '    255 Other error'                                                                             >&2
}

version() {
    echo "bub - Bulk User Backup v$VERSION"
}

. bucb.utils

# Parse inputfile
# We treat the first argument as a file if it doesn't start with a '-' (dash).
inputfile=
if [[ ! -v $1 && $1 != \-* ]]; then
    inputfile=$1
    shift
fi

# Parse flags
# This allows short and long version, although combining short flags (e.g. -vh)
# is not possible. This isn't really a problem, since most flags require a
# value anyway.
helpflag=
versionflag=
config_file=
archive_groups=
output=
excludes=
pattern=
keep=
for i in "$@"; do
    case $i in
        -h|--help)
            helpflag=1
            break
            ;;
        --version)
            versionflag=1
            break
            ;;
        --config=*)
            config_file="${i#*=}"
            shift
            ;;
        --config)
            config_file="$2"
            shift
            ;;
        -g=*|--group=*)
            archive_groups=("$archive_groups,${i#*=}")
            shift
            ;;
        -g|--group)
            archive_groups=("$archive_groups,$2")
            shift
            ;;
        -d=*|--directory=*)
            output="${i#*=}"
            shift
            ;;
        -d|--directory)
            output="$2"
            shift
            ;;
        -e=*|--exclude=*)
            excludes=("$excludes,${i#*=}")
            shift
            ;;
        -e|--exclude)
            excludes=("$excludes,$2")
            shift
            ;;
        -p=*|--pattern=*)
            pattern="${i#*=}"
            shift
            ;;
        -p|--pattern)
            pattern="$2"
            shift
            ;;
        -k*=|keep=*)
            keep="${i#*=}"
            shift
            ;;
        -k|keep)
            keep="$2"
            shift
            ;;
        -v=*|--verbose=*)
            LOGLEVEL="${i#*=}"
            shift
            ;;
        -v|--verbose)
            if [[ $2 == "D" || $2 == "I" || $2 == "W" || $2 == "E" ]]; then
                LOGLEVEL=$2
            else
                LOGLEVEL=D
            fi
            shift
            ;;
        *) shift ;;
    esac
done

mkdir -p $TMPDIR
mkdir -p $(dirname $LOGFILE)

log D "Invoked: $PARAM_LINE"
log D $(version)

# Show help and exit
if [ $helpflag ]; then
    usage
    exit 0
fi

# Show version and exit
if [ $versionflag ]; then
    version
    exit 0
fi

# We need to run as root, check against the effective user id.
# The effective user id is set e.g. when using sudo, while the real user id
# points to the user that invoked sudo.
if [ $EUID -ne 0 ]; then
    log E "insufficient permissions, script must be run as root"
    exit 1
fi

# Load config file
if [ -z ${config_file} ]; then
    if [ -f "$ETCDIR/bucb.env" ]; then
        . $ETCDIR/bucb.env
    else
        log E "no configuration file"
        exit 3
    fi
else
    if [ -f "$config_file" ]; then
        . $config_file
    else
        log E "invalid configuration file path provided"
        exit 3
    fi
fi

# Load groups from input file, if provided.
if [ -n "$inputfile" ]; then
    BACKUP_GROUPS_FILE="$(realpath $inputfile)"
    log I "Reading groups from $BACKUP_GROUPS_FILE"
fi

if [ -n "$output" ]; then
    BACKUP_DIR=$(realpath $output)
fi

# Config might contain relative paths
cd $ETCDIR

# Check if backup dir exists
if [[ ! -d "$BACKUP_DIR" ]]; then
    log E "backup directory does not exist"
    exit 255
fi

if [ -z ${archive_groups} ]; then
    if [[ ! -f "$BACKUP_GROUPS_FILE" ]]; then
        log E "no groups provided"
        exit 255
    fi
fi

# Gets all user from a group (passed as first parameter) and writes their home
# directories into `$backup_dirs`.
create_directory_listing() {
    group=$1
    if [ $(getent group $group) ]; then
        # Get users from group
        userstring=$(getent group $group | cut -d ':' -f 4)
        IFS=',' read -r -a users <<< $userstring
        log I "found ${#users[@]} users in $group group."
        [ -n "${users[*]}" ] && log D "the users are: ${users[*]}" || return
        # Get users home dirs
        for i in "${users[@]}"
        do
            homedir=$(getent passwd $i | cut -d ':' -f 6)
            log D "$i's home is $homedir"
            # Write home dir into file
            echo $homedir >> $backup_dirs
        done
    else
        log W "group $group does not exist"
    fi
}

# Read backup groups
backup_dirs=$TMPDIR/backup_dirs
if [ -z ${archive_groups} ]; then
    # Read from a file
    while IFS= read -r group; do
        create_directory_listing "$group"
    done < $BACKUP_GROUPS_FILE
else
    # Read from command line arguments, separated by ',' (commas).
    for i in ${archive_groups//,/ }
    do
        create_directory_listing "$i"
    done
fi

if [ ! -s $backup_dirs ]; then
    log W "no users to backup"
    exit 0
fi

cd $BACKUP_DIR

# Create backups using tar
if [ -n "$pattern" ]; then
    BACKUP_NAME=$pattern
else
    DEFAULT_BACKUP_NAME="$(date '+%Y.%m.%d-%H:%M:%S')-backup"
    BACKUP_NAME=${BACKUP_NAME:-$DEFAULT_BACKUP_NAME}
fi

if [ -f "$BACKUP_NAME.tar" ]; then
    log E "archive with similar name already exists"
    log E "use a unique/changing name in BACKUP_NAME, eg. the current date"
    exit 255
fi

# Build flag string for tar's --exclude=PATTERN
exclude_flags=
for i in ${excludes//,/ }
do
    exclude_flags=("--exclude=$i $exclude_flags")
done

if tar -cvf "$BACKUP_NAME.tar"\
    `# Read exclude patterns from bub.ignore files and apply them recursively` \
    `# to all subdirectories.` \
    --exclude-ignore-recursive=bub.ignore\
    $exclude_flags\
    -T $backup_dirs\
    `# Tar might interpret some file paths as remote urls otherwise.` \
    --force-local\
    > /dev/null 2>&1
then
    log I "backup saved to $(realpath $BACKUP_DIR)/$BACKUP_NAME.tar"
else
    log E "tar failed"
    exit 255
fi

# Delete oldest backup until there are no more backups than specified in
# `$keep`.
if [ -n "$keep" ]; then
    BACKUP_KEEP_MAX=$keep
fi

if [ -z $BACKUP_KEEP_MAX ] || [ $BACKUP_KEEP_MAX -le 0 ]; then
    log W "backup max unset, keeping all backups"
else
    # Delete old backups
    log I "only keeping latest $BACKUP_KEEP_MAX backups"
    nob=$(ls -1 . | wc -l)
    while [ $nob -gt $BACKUP_KEEP_MAX ]; do
        oldest=$(ls -1t | tail -1)
        rm $oldest
        log D "deleted oldest backup $oldest"
        nob=$(ls -1 . | wc -l)
    done
fi

# Finish
log I "logs written to $(realpath $LOGFILE)"
log I "archive written, $(stat --printf='%s' "$BACKUP_NAME.tar")B"
log I "total $(du -sh . | cut -f 1)"
echo "-----------------------------------------------------------------------"\
    >> $LOGFILE
exit 0
