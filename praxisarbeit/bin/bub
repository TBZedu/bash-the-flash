#!/usr/bin/env bash

# Examples:
# sudo LOGLEVEL=D bub
# sudo bub -v D
# sudo bub --config hello/world --group wheel --group=root -d /backup/homes\
#   -e hello -e world --pattern hey -k 3 -v

VERSION=1.0.0
LOGLEVEL=${LOGLEVEL:-W}  # Set default log level
CWD=$(pwd)               # Current working directory
cd $(dirname $0)
BINDIR=$(pwd)            # Script location
cd $CWD
BASENAME=$(basename $0)  # Script name
TMPDIR=/tmp/$BASENAME.$$ # Temporary directory
ETCDIR=$BINDIR/../etc    # Config directory
LOGFILE=$BINDIR/../var/bub.log

usage() {
    echo "$BASENAME [<arguments>] [<inputfile>]" >&2
    echo 'inputfile: file contains group names, one per line' >&2
    echo 'arguments:' >&2
    echo '    -h|--help                    : print this help'
    echo '    --version                    : show version and exit'
    echo '    --config=FILE                : path to config file'
    echo '    -g=GROUP|--group=GROUP       : group to archive, flag may be passed multiple times'
    echo '    -d=DIR|--directory=DIR       : save backup to directory'
    echo '    -e=FILE|--exclude=FILE       : file to exclude from backup, flag may be passed multiple times'
    echo '    -p=NAME|--pattern=NAME       : output file name'
    echo '    -k|--keep                    : number of backups to keep, must be greater than 0'
    echo '    -v[=LEVEL]|--verbose[=LEVEL] : log verbosity (D|I|W|E), if no LEVEL provided, then D'
}

version() {
    echo "bub - Bulk User Backup v$VERSION"
}

log() {
    local RED='\033[0;31m'
    local YEL='\033[1;33m'
    local WHI='\033[1;37m'
    local CYA='\033[0;36m'
    local BLU='\033[0;34m'
    local NC='\033[0m'
    DATE=$(date '+%Y.%m.%d %H:%M:%S')
    LEVEL=$1
    shift # Shift all parameters n+1, so that we can echo all further
          # parameters without echoing the log level (which was stored in $1)
    case $LEVEL in
        D)
            case $LOGLEVEL in
                D) echo -e "$DATE:${CYA}DEBUG${NC}:$*" | tee -a $LOGFILE ;;
            esac
            ;;
        I)
            case $LOGLEVEL in
                D|I) echo -e "$DATE:${WHI}INFO${NC}:$*" | tee -a $LOGFILE ;;
            esac
            ;;
        W)
            case $LOGLEVEL in
                D|I|W) echo -e "$DATE:${YEL}WARNING${NC}:$*" | tee -a $LOGFILE ;;
            esac
            ;;
        E) echo -e "$DATE:${RED}ERROR${NC}:$*" | tee -a $LOGFILE ;;
        *) echo -e "$DATE:${BLU}UNKNOWN${NC}:$*" | tee -a $LOGFILE ;;
    esac
}

param_line="$BASENAME $@"

if [ $UID -ne 0 ]; then
    log E "insufficient permissions, script must be run as root"
    exit 1
fi

# Parse flags
helpflag=
versionflag=
config_file=
archive_groups=
output=
excludes=
pattern=
keep=
for i in "$@"; do
    case $i in
        -h|--help)
            helpflag=1
            break
            ;;
        --version)
            versionflag=1
            break
            ;;
        --config=*)
            config_file="${i#*=}"
            shift
            ;;
        --config)
            config_file="$2"
            shift
            ;;
        -g=*|--group=*)
            archive_groups=("$archive_groups,${i#*=}")
            shift
            ;;
        -g|--group)
            archive_groups=("$archive_groups,$2")
            shift
            ;;
        -d=*|--directory=*)
            output="${i#*=}"
            shift
            ;;
        -d|--directory)
            output="$2"
            shift
            ;;
        -e=*|--exclude=*)
            excludes=("$excludes,${i#*=}")
            shift
            ;;
        -e|--exclude)
            excludes=("$excludes,$2")
            shift
            ;;
        -p=*|--pattern=*)
            pattern="${i#*=}"
            shift
            ;;
        -p|--pattern)
            pattern="$2"
            shift
            ;;
        -k*=|keep=*)
            keep="${i#*=}"
            shift
            ;;
        -k|keep)
            keep="$2"
            shift
            ;;
        -v=*|--verbose=*)
            verbosity="${i#*=}"
            shift
            ;;
        -v|--verbose)
            if [[ $2 == "D" || $2 == "I" || $2 == "W" || $2 == "E" ]]; then
                LOGLEVEL=$2
            else
                LOGLEVEL=D
            fi
            shift
            ;;
        *) shift ;;
    esac
done

mkdir -p $TMPDIR
mkdir -p $(dirname $LOGFILE)

log D "Invoked: $param_line"

# Load config
if [ -z ${config_file} ]; then
    if [ -f "$ETCDIR/bucb.env" ]; then
        . $ETCDIR/bucb.env
    else
        log E "no configuration file"
        exit 3
    fi
else
    if [ -f "$config_file" ]; then
        . $config_file
    else
        log E "invalid configuration file path provided"
        exit 3
    fi
fi

# Show help and exit
if [ $helpflag ]; then
    usage
    exit 0
fi

# Show version and exit
if [ $versionflag ]; then
    version
    exit 0
fi

log I $(version)

if [ -n "$output" ]; then
    BACKUP_DIR=$(realpath $output)
fi

# Config might contain relative paths
cd $ETCDIR

# Check if backup dir exists
if [[ ! -d "$BACKUP_DIR" ]]; then
    log E "backup directory does not exist"
    exit 255
fi

if [ -z ${archive_groups} ]; then
    if [[ ! -f "$BACKUP_GROUPS_FILE" ]]; then
        log E "no groups provided"
        exit 255
    fi
fi

create_directory_listing() {
    group=$1
    if [ $(getent group $group) ]; then
        # Get users from group
        userstring=$(getent group $group | cut -d ':' -f 4)
        IFS=',' read -r -a users <<< $userstring
        log I "found ${#users[@]} users in $group group."
        [ -n "${users[*]}" ] && log D "the users are: ${users[*]}" || return
        # Get users home dirs
        for i in "${users[@]}"
        do
            homedir=$(getent passwd $i | cut -d ':' -f 6)
            log D "$i's home is $homedir"
            # Write home dir into file
            echo $homedir >> $backup_dirs
        done
    else
        log W "group $group does not exist"
    fi
}

# Read backup groups
backup_dirs=$TMPDIR/backup_dirs
if [ -z ${archive_groups} ]; then
    while IFS= read -r group; do
        create_directory_listing "$group"
    done < $BACKUP_GROUPS_FILE
else
    for i in ${archive_groups//,/ }
    do
        create_directory_listing "$i"
    done
fi

if [ ! -s $backup_dirs ]; then
    log W "no users to backup"
    exit 0
fi

cd $BACKUP_DIR

# Create backups using tar
if [ -n "$pattern" ]; then
    BACKUP_NAME=$pattern
else
    DEFAULT_BACKUP_NAME="$(date '+%Y.%m.%d-%H:%M:%S')-backup"
    BACKUP_NAME=${BACKUP_NAME:-$DEFAULT_BACKUP_NAME}
fi

if [ -f "$BACKUP_NAME.tar" ]; then
    log E "archive with similar name already exists"
    log I "use a unique/changing name in BACKUP_NAME, eg. the current date"
    exit 255
fi

# Build flag string for tar's --exclude=PATTERN
exclude_flags=
for i in ${excludes//,/ }
do
    exclude_flags=("--exclude=$i $exclude_flags")
done

if tar -cvf "$BACKUP_NAME.tar" --exclude-ignore-recursive=bub.ignore $exclude_flags -T $backup_dirs --force-local > /dev/null 2>&1
then
    log I "backup saved to $(realpath $BACKUP_DIR)/$BACKUP_NAME.tar"
else
    log E "tar failed"
    exit 255
fi

if [ -n "$keep" ]; then
    BACKUP_KEEP_MAX=$keep
fi

if [ -z $BACKUP_KEEP_MAX ] || [ $BACKUP_KEEP_MAX -lt 1 ]; then
    log I "backup max unset, keeping all backups"
else
    # Delete old backups
    log I "only keeping latest $BACKUP_KEEP_MAX backups"
    nob=$(ls -1 . | wc -l)
    while [ $nob -gt $BACKUP_KEEP_MAX ]; do
        oldest=$(ls -1t | tail -1)
        rm $oldest
        log D "deleted oldest backup $oldest"
        nob=$(ls -1 . | wc -l)
    done
fi

log I "logs written to $(realpath $LOGFILE)"
log I "archive written, $(stat --printf='%s' "$BACKUP_NAME.tar")B"
log I "total $(du -sh . | cut -f 1)"
echo "-----------------------------------------------------------------------"\
    >> $LOGFILE
exit 0
